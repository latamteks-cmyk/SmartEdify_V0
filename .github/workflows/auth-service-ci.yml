name: auth-service-ci

concurrency:
  group: auth-service-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    paths:
      - 'apps/services/auth-service/**'
      - '.github/workflows/auth-service-ci.yml'
  pull_request:
    paths:
      - 'apps/services/auth-service/**'

permissions:
  contents: read
  security-events: write

env:
  NODE_VERSION: 20
  SERVICE_DIR: apps/services/auth-service

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.SERVICE_DIR }}/package-lock.json
      - name: Install deps
        working-directory: ${{ env.SERVICE_DIR }}
        run: npm ci
      - name: ESLint
        working-directory: ${{ env.SERVICE_DIR }}
        run: npm run lint

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.SERVICE_DIR }}/package-lock.json
      - name: Install deps
        working-directory: ${{ env.SERVICE_DIR }}
        run: npm ci
      - name: Build (tsc)
        working-directory: ${{ env.SERVICE_DIR }}
        run: npm run build -- --pretty false

  openapi_lint:
    name: OpenAPI Lint
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Lint OpenAPI specs
        run: npm run lint:openapi

  tests:
    name: Tests (unit, integration & contract)
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: smartedify
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 5s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7.2-alpine
        ports: ['6379:6379']
        options: >-
          --health-cmd "redis-cli ping" --health-interval 5s --health-timeout 3s --health-retries 5
    env:
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: smartedify
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      AUTH_LOG_LEVEL: warn
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.SERVICE_DIR }}/package-lock.json
      - name: Install deps
        working-directory: ${{ env.SERVICE_DIR }}
        run: npm ci
      - name: Run migrations
        working-directory: ${{ env.SERVICE_DIR }}
        run: npm run migrate up
      - name: Run test suites with coverage
        working-directory: ${{ env.SERVICE_DIR }}
        run: npm test -- --runInBand --coverage
      - name: Publicar resumen de cobertura de integración
        working-directory: ${{ env.SERVICE_DIR }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const summaryPath = path.join(process.cwd(), 'coverage/integration/coverage-summary.json');
          if (!fs.existsSync(summaryPath)) {
            console.warn('No se encontró coverage-summary.json para integración');
            process.exit(0);
          }
          const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
          const total = summary.total || {};
          const lines = total.lines ? total.lines.pct : 0;
          const statements = total.statements ? total.statements.pct : 0;
          const branches = total.branches ? total.branches.pct : 0;
          const functions = total.functions ? total.functions.pct : 0;
          const md = [
            '### Cobertura integración auth-service',
            '',
            '| Métrica | % |',
            '| --- | --- |',
            `| Líneas | ${lines}% |`,
            `| Sentencias | ${statements}% |`,
            `| Funciones | ${functions}% |`,
            `| Branches | ${branches}% |`
          ].join('\n');
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, `${md}\n`);
          NODE
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: auth-service-coverage
          path: ${{ env.SERVICE_DIR }}/coverage

  sbom:
    name: Generar SBOM
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Generar SBOM SPDX
        uses: anchore/sbom-action@v0.16.0
        with:
          path: ${{ env.SERVICE_DIR }}
          format: spdx-json
          output-file: auth-service-sbom.json
      - uses: actions/upload-artifact@v4
        with:
          name: auth-service-sbom
          path: auth-service-sbom.json

  sast:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci

  container_scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        working-directory: ${{ env.SERVICE_DIR }}
        run: docker build -t auth-service:ci .
      - name: Scan image
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: auth-service:ci
          format: table
          exit-code: '1'
          ignore-unfixed: true

  secret_scan:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: gitleaks/gitleaks-action@v2
        with:
          config-path: ''
          verbose: true
