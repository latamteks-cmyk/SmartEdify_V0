name: ci-quality

on:
  pull_request:
    branches: [ main ]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install deps
        run: npm ci

      - name: Lint shared package
        run: npm run lint --workspace @smartedify/shared

      - name: Typecheck shared package
        run: npm run typecheck --workspace @smartedify/shared

      - name: Generate shared types
        run: npm run types --workspace @smartedify/shared

      - name: Typecheck (if configured)
        run: |
          if [ -f tsconfig.json ]; then
            npx tsc -b || true
          fi

      - name: Lint (if configured)
        run: |
          if [ -f package.json ] && jq -e '.scripts.lint' package.json > /dev/null; then
            npm run lint
          else
            echo "No lint script"
          fi

      - name: Test auth-service (unit + contract)
        run: |
          pushd apps/services/auth-service
          SKIP_DB_TESTS=1 NODE_ENV=test AUTH_ADMIN_API_KEY=test-admin-key npm run test:proj:unit --silent
          SKIP_DB_TESTS=1 NODE_ENV=test AUTH_ADMIN_API_KEY=test-admin-key npm run test:proj:contract --silent
          popd

      - name: Test tenant-service (vitest)
        run: |
          pushd apps/services/tenant-service
          npm test --silent
          popd

      - name: Install validators
        run: |
          npm i -g @mermaid-js/mermaid-cli spectral-cli

      - name: Validate Mermaid diagrams
        run: |
          set -e
          for f in $(git ls-files "**/*.mmd"); do
            echo "Validating $f";
            mmdc -i "$f" -o /dev/null || exit 1;
          done

      - name: Lint OpenAPI with Spectral
        run: |
          set -e
          for f in $(git ls-files "**/*.yaml"); do
            echo "Spectral lint $f";
            spectral lint "$f" || exit 1;
          done

  contract-tests:
    name: schemathesis-contracts
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install service dependencies
        run: |
          npm ci --prefix apps/services/auth-service
          npm ci --prefix apps/services/tenant-service

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Schemathesis tooling
        run: python -m pip install --upgrade pip && python -m pip install -r requirements-schemathesis.txt

      - name: Ejecutar contratos Auth (Schemathesis)
        run: npm run contract:auth:schemathesis

      - name: Ejecutar contratos Tenant (Schemathesis)
        run: npm run contract:tenant:schemathesis

      - name: Publicar reportes Schemathesis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: schemathesis-reports
          path: reports/contracts
