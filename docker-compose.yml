version: '3.8'

# Variables recomendadas en .env (con defaults aqu√≠ solo para DX)
# POSTGRES_DB=smartedify
# POSTGRES_USER=postgres

services:
  redis:
    image: redis:7.2-alpine
    container_name: smartedify-redis
    user: "999:999"
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "256M"
    ports:
      - "${REDIS_PORT:-6639}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: smartedify-db
    user: "999:999"
    deploy:
      resources:
        limits:
          cpus: "1.50"
          memory: "1G"
    environment:
      # IMPORTANTE: NO usar credenciales reales por defecto. Definir en .env local/CI.
      POSTGRES_DB: ${POSTGRES_DB:-smartedify}
      POSTGRES_USER: ${POSTGRES_USER:-CHANGE_ME_DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_ME_DB_PASSWORD}
    ports:
      - "${PGPORT:-5542}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  auth-service:
    build:
      context: ./apps/services/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    user: "1001:1001"
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: "512M"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PGHOST: db
      PGPORT: 5432
      PGUSER: ${POSTGRES_USER:-postgres}
      PGPASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATABASE: ${POSTGRES_DB:-smartedify}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AUTH_PORT: 9080
      AUTH_LOG_LEVEL: info
      NODE_ENV: production
    ports:
      - "${AUTH_PORT:-3001}:9080"
    restart: unless-stopped

  user-service:
    build:
      context: ./apps/services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    user: "1001:1001"
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: "512M"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-smartedify}
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_NAME: ${POSTGRES_DB:-smartedify}
      DATABASE_USER: ${POSTGRES_USER:-postgres}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      NODE_ENV: production
      PORT: 3002
      LOG_LEVEL: info
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
    ports:
      - "${USER_PORT:-3002}:3002"
    restart: unless-stopped

  gateway-service:
    build:
      context: ./apps/services/gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    user: "1001:1001"
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: "512M"
    depends_on:
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_started
    environment:
      NODE_ENV: production
      PORT: 3000
      LOG_LEVEL: info
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWKS_URL: http://auth-service:9080/.well-known/jwks.json
      AUTH_SERVICE_URL: http://auth-service:9080
      USER_SERVICE_URL: http://user-service:3002
      TENANT_SERVICE_URL: http://tenant-service:3003
      CORS_ORIGIN: "*"
      CORS_CREDENTIALS: "false"
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      HEALTH_CHECK_INTERVAL: 30000
    ports:
      - "${GATEWAY_PORT:-3000}:3000"
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector:0.88.0
    container_name: otel-collector
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "256M"
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "${OTEL_COLLECTOR_GRPC_PORT:-4317}:4317"
      - "${OTEL_COLLECTOR_HTTP_PORT:-4318}:4318"
      - "${OTEL_COLLECTOR_PROM_PORT:-8889}:8889"
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    user: "65534:65534"
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: "512M"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    depends_on:
      otel-collector:
        condition: service_started
    restart: unless-stopped

volumes:
  redis_data:
  db_data:

# Ejemplo futuro tenant-service (mantener fuera de bloque volumes):
#  tenant-service:
#    build:
#      context: ./apps/services/tenant-service
#      dockerfile: Dockerfile
#    container_name: tenant-service
#    depends_on:
#      db:
#        condition: service_healthy
#    environment:
#      TENANT_DB_URL: postgres://$${POSTGRES_USER:-postgres}:$${POSTGRES_PASSWORD:-postgres}@db:5432/$${POSTGRES_DB:-smartedify}
#      TENANT_PORT: ${TENANT_PORT:-9084}
#      TENANT_LOG_LEVEL: ${TENANT_LOG_LEVEL:-info}
#      TENANT_OUTBOX_POLL_INTERVAL_MS: ${TENANT_OUTBOX_POLL_INTERVAL_MS:-2000}
#      TENANT_OUTBOX_BATCH_SIZE: ${TENANT_OUTBOX_BATCH_SIZE:-50}
#    ports:
#      - "${TENANT_PORT:-9084}:8084"
#    restart: unless-stopped
